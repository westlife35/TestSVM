/*************************************************************************
	> File Name: train.cpp
	> Author: 
	> Mail: 
	> Created Time: Tue 26 May 2015 03:16:46 PM CST
 ************************************************************************/

#include<iostream>
using namespace std;
#include "linear.h"

void SVM(model &outModel[],double &dMeanBias,feature_node** trainFeature,int** trainLabel,int nNumOfTrainData,int nNumOfTrainFeature,int nNumOfTrainLabel,feature_node** testFeature,int** testLabel,int nNumOfTestData,double lambda );

int main()
{
    
    


    return 1;
}
void SVM(model &outModel[],double &dMeanBias,feature_node** trainFeature,int** trainLabel,int nNumOfTrainData,int nNumOfTrainFeature,int nNumOfTrainLabel,feature_node** testFeature,int** testLabel,int nNumOfTestData,double lambda )
{
    //have make the 0 int trainLabel and testLabel equals to -1
    dMeanBias=0;
    double meanBiasArray[3]={0.0};
    for(int i=0;i<nNumOfTrainLabel;i++)
    {
	    problem prob;
    	prob.l=nNumOfTrainData;
    	prob.n=nNumOfTrainFeature;
    	prob.x=trainFeature;
    	prob.bias=-1;
	    prob.y=trainLabel[i];

    	parameter param;
    	param.solvertype=L2R_L2LOSS_SVR;
    	//param.eps=
    	param.C=lambda
    	//param.nr_weight=
	    //param.p=

    	char* error=check_parameter(&prob,&param);
    	if(error!=NULL)
    	{
        	cout<<"there are sone error in the parameter or prolem set,the error is : "<<error<<endl;
        	return NULL;
    	}

    	outModel[i]= train(&prob,&param);
	
	    for(int j=0;j<nNumOfTestData;j++)
	    {
	    	double tempScore=predict(trainedModel,testFeature[j]);
	        meanBiasArray[i]+=abs(tempScore-testLabel[j]);
	    }
        meanBiasArray[i]/=nNumOfTestData;
    }
    for(int i=0;i<3;i++)
    {
        dMeanBias+=meanBiasArray[i];
    }
    dMeanBias/=3;
    
}
